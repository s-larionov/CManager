<?xml version="1.0" encoding="UTF-8"?>
<root layout="common.php">
	<!-- Небольшое отступление. У любого тега можно указать атрибут @extends, где записать валидный xpath до другого -->
	<!-- объекта внутри файла и текущий элемент будет пронаследован от найденного по xpath. Например:                -->
	<!-- <tag extends="/root/shared/tag[@name = 'tag-name-1']"><params count="10"/></tag>                            -->
	<!-- Любой атрибут или вложенный объект <params/> можно переопределять или же он возьмет значение                -->
	<!-- с родительского элемента.                                                                                   -->

	<!-- тег <shared/> описывает глобальные теги, которые можно использовать                                         -->
	<!-- из любого места (на самом деле можно как угодно называть, так как доступ                                    -->
	<!-- до них обеспечивается через xpath                                                                           -->
	<shared>
		<!-- <tag/> имеет два обязательных атрибута:                                                                 -->
		<!-- @name      - Название тега, по которому он будет вызываться (и по которому                              -->
		<!--              проще всего строить xpath для @extends) Если несколько тегов                               -->
		<!--              с одинаковым @name, то будут вызваны они все в порядке "нормального потока"                -->
		<!-- @namespace - Название класса наследника cm_Controller_Action_Abstract,                                  -->
		<!--              который будет вызван для рендера тега                                                      -->
		<!-- @mode      - Необязательный атрибует. Может принимать одно из следующих                                 -->
		<!--              значений: normal (по-умолчанию), background                                                -->
		<!--                  normal     - обычный режим тега                                                        -->
		<!--                  background - выполняется всегда, вне зависимости от вызовов пользователя               -->
		<tag name="tag-name-1" namespace="CMMods_Content">
			<!-- Внутри <tag/> может содержать необязательный элемент <params/>, который описыват параметры,         -->
			<!-- которые будут доступны по $this->getParam() из cm_Controller_Action_Abstract                        -->
			<!-- <params/> может быть записан по-разному. Например:                                                  -->
			<!-- <params prefix="pub_" type="news" count="4"/>                                                       -->
			<!-- или то же самое можно записать как:                                                                 -->
			<!-- <params>                                                                                            -->
			<!--     <prefix>pub_</prefix>                                                                           -->
			<!--     <type value="news"/>                                                                            -->
			<!--     <count value="4"/>                                                                              -->
			<!-- </params>                                                                                           -->
			<!-- Из cm_Controller_Action_Abstract параметры будут доступны следующим образом:                        -->
			<!-- echo $this->getParam('prefix'); // "pub_"                                                           -->
			<!-- echo $this->getParam('type');   // "news"                                                           -->
			<!-- echo $this->getParam('count');  // "4"                                                              -->
			<!--                                                                                                     -->
			<!-- Так же элементы внутри <param/> могут быть вложенными, тогда из $this->getParam будет               -->
			<!-- доступен массив. Например:                                                                          -->
			<!-- <params>                                                                                            -->
			<!--     <type>Type1</type>                                                                              -->
			<!--     <type>Type2</type>                                                                              -->
			<!--     <type>Type3</type>                                                                              -->
			<!--     <type>Type4</type>                                                                              -->
			<!--     <cascade>                                                                                       -->
			<!--         <element id="1">Value 1</element>                                                           -->
			<!--         <element id="2">Value 2</element>                                                           -->
			<!--         <element id="3">Value 3</element>                                                           -->
			<!--     </cascade>                                                                                      -->
			<!-- </params>                                                                                           -->
			<!-- Из cm_Controller_Action_Abstract мы сможем получить следующие данные:                               -->
			<!-- $this->getParam('type')    // array('Type', 'Type2', 'Type3', 'Type4')                              -->
			<!-- $this->getParam('cascade') // array(                                                                -->
			<!--                            //     'cascade' => array(                                               -->
			<!--                            //         'element' => array(                                           -->
			<!--                            //             0 => array('id' => '1', 'value' => 'Value 1'),            -->
			<!--                            //             1 => array('id' => '2', 'value' => 'Value 2'),            -->
			<!--                            //             2 => array('id' => '3', 'value' => 'Value 3')             -->
			<!--                            //         )                                                             -->
			<!--                            //     )                                                                 -->
			<!--                            // )                                                                     -->
			<params count="4"/>
		</tag>
	</shared>

	<!-- <page/> описанвает страницу. Обязательный атрибут @name и обязательно должен                                -->
	<!--         содержать внутри себя один (и только один) <route/>                                                 -->
	<!-- @name       - Название страницы, используется для хранения <route/>'ов                                      -->
	<!--               и для генерации ссылок (->getRouter()->generateUrl('name', array(...))                        -->
	<!-- @error_code - Код страницы (404, 403, 401 и т.д.). Используется для создания технических страниц.           -->
	<!-- @namespace  - Класс, который будет ответственным за рендер страницы (наследник cm_Controller_Page)          -->
	<page name="index">
		<!-- <route/> описывать разбор url. Имеет обязательный атрибут @url                                          -->
		<!-- @url - Паттерн разбора ссылки. Может содержать внутри себя переменные: записываются как (:varname)      -->
		<!--        Все переменные, указанные в @url должны быть описаны дочерним элементом <var/>                   -->
		<route url="" />
		<!-- <title/> - Заголовок страницы. TODO: сделать различные @mode                                            -->
		<title>Индексная страница</title>
		<tag name="test" extends="/root/shared/tag[@name = 'news']">
			<params count="10"/>
		</tag>
	</page>

	<page name="404" error_code="404">
		<route url="/404/"/>
		<title>404. Страница не найдена</title>
	</page>

	<page name="403" error_code="403">
		<route url="/forbidden/"/>
		<title>Доступ запрещен</title>
	</page>

	<page name="login" error_code="401">
		<route url="/login/"/>
		<title>Авторизация</title>
	</page>

	<page name="catalog">
		<route url="catalog/(:categoryAliases)">
			<!-- <var/> описывает переменную, берущую свое значение на основе url и <route/>                         -->
			<!--        Обязательные атрибуты @name и @rule                                                          -->
			<!-- @name      - Имя переменной, такое же как в route/@url                                              -->
			<!-- @rule      - RegExp для переменной.                                                                 -->
			<!-- @default   - Значение по-умолчанию. (подробнее смотреть описание @pattern)                          -->
			<!-- @explode   - Разбить нашу переменную по строке (получить массив)                                    -->
			<!-- @pattern   - Шаблон для вытаскивания значений с вложных случаях                                     -->
			<!--              Например, ссылки вида: /profile/page-1/, /catalog/page-2132/ или просто /catalog/      -->
			<!--              Простой способ решить задачу:                                                          -->
			<!--              <route url="catalog(:page)">                                                           -->
			<!--                  <var name="page" rule="/page-\d+">                                                 -->
			<!--              </route>                                                                               -->
			<!--              Но в этом случае в переменной page будет храниться не просто номер нашей страницы,     -->
			<!--              а строка вида "/page-1" иои "/page-2132"                                               -->
			<!--              Используя @pattern мы можем решить поставленную задачу:                                -->
			<!--              <route url="catalog(:page)">                                                           -->
			<!--                  <var name="page" rule="/page-\d+" pattern="/page-(\d+)">                           -->
			<!--              </route>                                                                               -->
			<!--              Теперь в переменную попадет только номер нашей страницы.                               -->
			<!--              Еще осталась задача, что бы отрабатывала ссылка /catalog/ без указания страницы.       -->
			<!--              Решить это можно указав аттрибут @default:                                             -->
			<!--              <route url="catalog(:page)">                                                           -->
			<!--                  <var name="page" rule="/page-\d+" default="/page-0" pattern="/page-(\d+)">         -->
			<!--              </route>                                                                               -->
			<!--              Но можно использовать и несколько обратных масок, тогда вернется массив.               -->
			<!--              В случае если по этому паттерну ничего не найдено, то переменная будет равна null      -->
			<!-- @namespace - Преобразовать к типу. Возможные значения:                                              -->
			<!--                  - простые типы: int, string, bool (или boolean), float (или double)                -->
			<!--                  - имя класса - в качестве аргумента принимает одно значение, вычисленное           -->
			<!--                    на всех ранних этапах (строка или массив строк)                                  -->
			<var name="categoryAliases" rule="[a-zA-Z_-][a-zA-Z_0-9-]+(?:/[a-zA-Z_-][a-zA-Z_0-9-]+){0,4}?" explode="/"/>
		</route>
		<title>Catalog</title>

		<page name="good">
			<route url="(:categoryAliases)/(:goodId)">
				<var extends="ancestor::page[@name = 'catalog']/route/var[@name = 'categoryAliases']"/>
				<var name="goodId" rule="\d+"/>
			</route>
			<title>Good</title>
		</page>
	</page>
</root>